[
    {
        "id": "7ddffdaa1703591f",
        "type": "debug",
        "z": "ff477416b0a79e72",
        "name": "debug HTTP binding",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 660,
        "wires": []
    },
    {
        "id": "36cd858ee8b84b98",
        "type": "group",
        "z": "ff477416b0a79e72",
        "name": "binding between schedules Analog values and devices Analog values ",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000",
            "stroke": "#ffC000"
        },
        "nodes": [
            "908455a316b436d6",
            "3c195491ad1bc1ed",
            "7ff56057f93ed935",
            "62e77a0aecf70eae",
            "e4eac157f7ae6cbe",
            "3c8e1323dff7acc1",
            "3eacf432c60b7a58"
        ],
        "x": 54,
        "y": 520,
        "w": 1012,
        "h": 121
    },
    {
        "id": "908455a316b436d6",
        "type": "inject",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "Link",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 115,
        "y": 600,
        "wires": [
            [
                "3c195491ad1bc1ed"
            ]
        ],
        "l": false
    },
    {
        "id": "3c195491ad1bc1ed",
        "type": "function",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "Binding between setpoint and schedule analog value",
        "func": "const controllerIP = flow.get(\"f_controllerIP\");\nconst authKey = flow.get(\"f_akey\");\nconst rooms = flow.get(\"f_rooms\");\nlet deviceList = flow.get(\"f_deviceList\");\nvar setPoint;\nlet schedulesAVOffset = flow.get(\"f_schedulesAVOffset\");\nvar property_references = [];\n\nfor (var room in rooms) {\n    let scheduleID = rooms[room].scheduleID;\n    let roomName = rooms[room].scheduleName;\n    let deviceObject = rooms[room].devices;\n    for (let device in deviceObject) {\n        deviceObject[device].forEach( deviceNum => {\n            // Return HTTP Request\n            node.send({\n                \"request\":{\n                    \"method\": \"POST\",\n                    \"url\": \"https://\" + controllerIP + \"/api/rest/v2/services/events/bindings/\" + roomName + \"-\"+ device +\"-\" + deviceNum,\n                    \"headers\": {\n                      Authorization: authKey,\n                      ContentType: \"application/json\"\n                    },\n                     \"payload\": {\n                        \"key\": roomName + \"-\"+ device +\"-\" + deviceNum,\n                        \"sync-a-to-b\": {\n                            \"options\": {\n                                \"priorities\": true,\n                                \"write-priority\": 14,\n                                \"value\": false,\n                                \"out-of-service\": true\n                            },\n                            \"triggers\": {\n                                \"1\": {\n                                    \"key\": \"1\",\n                                    \"min-sync-time\": 0.0,\n                                    \"type\": \"OnChange\"\n                                }\n                            }\n                        },\n                        \"element-b\": \"/services/bacnet/local/objects/analog-values/\" + ((deviceNum * deviceList[device].bacnet.instanceRangeAV) + deviceList[device].bacnet.offsetAV + deviceList[device].bacnet.objects.controllerSetpoint.instanceNum),\n                        \"element-a\": \"/services/bacnet/local/objects/analog-values/\" + (scheduleID + schedulesAVOffset),\n                        \"initialize\": \"b-to-a\",\n                        \"type\": \"ControlElement\",\n                        \"sync-b-to-a\": {\n                            \"options\": {\n                                \"priorities\": true,\n                                \"write-priority\": 14,\n                                \"value\": false,\n                                \"out-of-service\": true\n                            },\n                            \"triggers\": {\n                                \"1\": {\n                                    \"key\": \"1\",\n                                    \"min-sync-time\": 0.0,\n                                    \"type\": \"OnChange\"\n                                }\n                            }\n                        }\n                    },\n                    \"requestTimeout\": 5000\n                }\n            });\n        });\n    }\n}   ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "62e77a0aecf70eae"
            ]
        ]
    },
    {
        "id": "7ff56057f93ed935",
        "type": "http request",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 600,
        "wires": [
            [
                "7ddffdaa1703591f"
            ]
        ]
    },
    {
        "id": "62e77a0aecf70eae",
        "type": "queue",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "",
        "input": "request",
        "inputType": "msg",
        "addFields": "{}",
        "addFieldsType": "json",
        "pourType": "initial",
        "pourTypeType": "pourType",
        "pourTime": "",
        "pourTimeType": "num",
        "pourAmount": "1",
        "pourAmountType": "num",
        "maxUseMemory": "",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "3eacf432c60b7a58"
            ]
        ]
    },
    {
        "id": "e4eac157f7ae6cbe",
        "type": "complete",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "HTTP request complete",
        "scope": [
            "7ff56057f93ed935"
        ],
        "uncaught": false,
        "x": 305,
        "y": 561,
        "wires": [
            [
                "3c8e1323dff7acc1"
            ]
        ]
    },
    {
        "id": "3c8e1323dff7acc1",
        "type": "change",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "dequeue",
        "rules": [
            {
                "t": "set",
                "p": "dequeue",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 491,
        "y": 561,
        "wires": [
            [
                "62e77a0aecf70eae"
            ]
        ]
    },
    {
        "id": "3eacf432c60b7a58",
        "type": "function",
        "z": "ff477416b0a79e72",
        "g": "36cd858ee8b84b98",
        "name": "rebuild msg",
        "func": "msg = { \n    \"method\": msg.request[0].method, \n    \"url\": msg.request[0].url, \n    \"headers\": msg.request[0].headers, \n    \"payload\": msg.request[0].payload,\n    \"requestTimeout\": msg.request[0].requestTimeout\n     }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "7ff56057f93ed935"
            ]
        ]
    },
    {
        "id": "2418490b3512393e",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]