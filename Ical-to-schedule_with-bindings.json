[
    {
        "id": "8c463de0ec7f8b06",
        "type": "tab",
        "label": "Ical-to-Schedule+Link-with-objects",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "159b05ca189fd9cb",
        "type": "group",
        "z": "8c463de0ec7f8b06",
        "name": "Configuration",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bcb52ea67cccc5c7",
            "82a3b2d6bbbb7039"
        ],
        "x": 14,
        "y": 19,
        "w": 312,
        "h": 82
    },
    {
        "id": "27906eb4db4d93ff",
        "type": "group",
        "z": "8c463de0ec7f8b06",
        "name": "Process POST Schedule automate",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ce26a079b584e4e0",
            "eec987585316a9a2",
            "01427745cb339161",
            "9f7c7819c943a0b7",
            "7e4c44fab067bd25",
            "09a87c83284c7e9e",
            "154363a51770461f",
            "abc286970b71e6db",
            "a33626d5a9cd290d",
            "aadefafb49851b96",
            "13c6eacf9e333b84",
            "171a7b62cff423b0",
            "09d17ff53d09ca2e",
            "8fc8b6dee95b7531",
            "94d1af7d10ef3427"
        ],
        "x": 14,
        "y": 119,
        "w": 2791,
        "h": 222
    },
    {
        "id": "572830bf5120ad8c",
        "type": "group",
        "z": "8c463de0ec7f8b06",
        "name": "link between schedules Analog values and devices Analog values ",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000",
            "stroke": "#ffC000"
        },
        "nodes": [
            "2a7513d76983f61b",
            "0d3665907b803ddc",
            "9e4f9a43ec8b20d9",
            "e620980c278637a9",
            "c8b02852c9fb74ab",
            "5c82cc8d2f0acc82",
            "f00f02f9dab074d3"
        ],
        "x": 14,
        "y": 500,
        "w": 1012,
        "h": 121
    },
    {
        "id": "3defac0f4914dc28",
        "type": "group",
        "z": "8c463de0ec7f8b06",
        "name": "link between schedules and Analog values ",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000",
            "stroke": "#ffC000"
        },
        "nodes": [
            "062fc0515f6be6e5",
            "ead34e9802176f01",
            "3e3522d6dab50c40",
            "8e6d56d7d6767e9d",
            "b2de50d710e0d240"
        ],
        "x": 14,
        "y": 359,
        "w": 1092,
        "h": 82
    },
    {
        "id": "13c6eacf9e333b84",
        "type": "group",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Create missing BACnet Schedules",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "55f518b184830a4b",
            "3625f062216a0953",
            "fde696686bae0215",
            "3242bf47a45d991f"
        ],
        "x": 1629,
        "y": 214,
        "w": 908,
        "h": 82
    },
    {
        "id": "8fc8b6dee95b7531",
        "type": "junction",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "9f7c7819c943a0b7"
            ]
        ]
    },
    {
        "id": "94d1af7d10ef3427",
        "type": "junction",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "x": 2573.300188302994,
        "y": 208.16326677799225,
        "wires": [
            [
                "a33626d5a9cd290d"
            ]
        ]
    },
    {
        "id": "0acc09321b3d4acc",
        "type": "comment",
        "z": "8c463de0ec7f8b06",
        "name": "iCal to schedule",
        "info": "Made by Sacha",
        "x": 500,
        "y": 40,
        "wires": []
    },
    {
        "id": "2a7513d76983f61b",
        "type": "inject",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "Link",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "x": 75,
        "y": 580,
        "wires": [
            [
                "0d3665907b803ddc"
            ]
        ],
        "l": false
    },
    {
        "id": "0d3665907b803ddc",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "Binding between setpoint and schedule analog value",
        "func": "\nconst rooms = flow.get(\"g_rooms\");\nlet instanceRange = 10;\nvar setPoint;\nconst offsetDev = 0; //this offset come from the LoRaBAC application\nlet offset = flow.get(\"g_offset\");\nvar property_references = [];\n\nfor (var room in rooms) {\n    let scheduleID = rooms[room][\"ScheduleID\"];\n    let roomName = rooms[room].name;\n    let devTable = rooms[room].devices;\n    for (let device in devTable) {\n    \n        // Return HTTP Request\n        node.send({\n            \"request\":{\n                \"method\": \"POST\",\n                \"url\": \"https://\" + flow.get('g_controllerIP') + \"/api/rest/v2/services/events/bindings/\" + roomName + \"-device-\" + devTable[device],\n                \"headers\": {\n                  Authorization: flow.get(\"g_akey\"),\n                  ContentType: \"application/json\"\n                },\n                 \"payload\": {\n                    \"key\": roomName + \"-device-\" + devTable[device],\n                    \"sync-a-to-b\": {\n                        \"options\": {\n                            \"priorities\": true,\n                            \"write-priority\": 14,\n                            \"value\": false,\n                            \"out-of-service\": true\n                        },\n                        \"triggers\": {\n                            \"1\": {\n                                \"key\": \"1\",\n                                \"min-sync-time\": 0.0,\n                                \"type\": \"OnChange\"\n                            }\n                        }\n                    },\n                    \"element-b\": \"/services/bacnet/local/objects/analog-values/\" + ((devTable[device]*instanceRange) + offsetDev),\n                    \"element-a\": \"/services/bacnet/local/objects/analog-values/\" + (scheduleID +offset),\n                    \"initialize\": \"b-to-a\",\n                    \"type\": \"ControlElement\",\n                    \"sync-b-to-a\": {\n                        \"options\": {\n                            \"priorities\": true,\n                            \"write-priority\": 14,\n                            \"value\": false,\n                            \"out-of-service\": true\n                        },\n                        \"triggers\": {\n                            \"1\": {\n                                \"key\": \"1\",\n                                \"min-sync-time\": 0.0,\n                                \"type\": \"OnChange\"\n                            }\n                        }\n                    }\n                },\n                \"requestTimeout\": 5000\n            }\n        });\n}\n}   ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            [
                "e620980c278637a9"
            ]
        ]
    },
    {
        "id": "9e4f9a43ec8b20d9",
        "type": "http request",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "c1fc527789e0bc0d",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 580,
        "wires": [
            [
                "b180368dd2db5874"
            ]
        ]
    },
    {
        "id": "bcb52ea67cccc5c7",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "159b05ca189fd9cb",
        "name": "TO CONFIGURE",
        "func": "//////////////////////////////////////////////////\n////////////    TO CONFIGURE   ///////////////////\n//////////////////////////////////////////////////\n\n// Controller information\nconst controllerIP = \"TO_CONFIGURE\";       // Controller IP Address\nconst controllerLogin = \"TO_CONFIGURE\";            //Apex distech login\nconst controllerPassword = \"TO_CONFIGURE\";  //Apex distech password\n\n// Schedule object information\nconst timeZone = 'Europe/Paris';\nconst dailySchedule = false;                 // Group events in 1 event/day\nconst timeOffsetBeforeStart = 0;            // in min\nconst timeOffsetBeforeEnd = 0;              // in min\nconst contentRmEvent = [\"TO_CONFIGURE\"];      // if DAILY_SCHEDULE is enable, \n                                                    // all events that content this \n                                                    // string in their description \n                                                    // will be ignored\nconst preview = 7;\nconst pastview = 0;\nconst sorted = false;                       // Events are sorted in chronological order.  \n                                            // This helps to reduce algorithm complexity \n                                            // when enable\n\n// Schedule object values\nconst tempOccupied = 20;\nconst tempUnOccupied = 17;\n\n/////////////////////////////////////////////////\n/////////////// DO NOT MODIFY ///////////////////\n/////////////////////////////////////////////////\n\n//Autentification key\nlet bufferkey = Buffer.from(controllerLogin + \":\" + controllerPassword);\nconst keybase64 = bufferkey.toString('base64');\nconst autentikey = \"Basic \" + keybase64;\n\n// Store variables\nflow.set('g_controllerIP', controllerIP);\nflow.set('g_akey', autentikey);\nflow.set(\"g_offset\", 5000);\n\nflow.set('g_tempOccupied', tempOccupied);\nflow.set('g_tempUnOccupied', tempUnOccupied);\n\nflow.set('g_timeZone', timeZone);\nflow.set('g_dailySchedule', dailySchedule);\nflow.set('g_timeOffsetBeforeStart', timeOffsetBeforeStart);\nflow.set('g_timeOffsetBeforeEnd', timeOffsetBeforeEnd);\nflow.set('g_contentRmEvent', contentRmEvent);\nflow.set('g_preview', preview);\nflow.set('g_pastview', pastview);\nflow.set('g_sorted', sorted);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            []
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "82a3b2d6bbbb7039",
        "type": "inject",
        "z": "8c463de0ec7f8b06",
        "g": "159b05ca189fd9cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 75,
        "y": 60,
        "wires": [
            [
                "bcb52ea67cccc5c7"
            ]
        ],
        "l": false
    },
    {
        "id": "f1f9ff017502cf59",
        "type": "debug",
        "z": "8c463de0ec7f8b06",
        "name": "Debug HTTP Write Schedule",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1529,
        "y": 364,
        "wires": []
    },
    {
        "id": "ce26a079b584e4e0",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Rooms",
        "func": "//////////////////////////////////////////////\n//////////////// TO CONFIGURE ////////////////\n//////////////////////////////////////////////\n\n// Room template\nlet template = {\n    \"ScheduleID\": 0,    //To use the link correctly make sure to use following numbers and start with 0\n    \"name\": \"roomName\",\n    \"devices\": [0, 1, 2], //device number of LoRaBAC\n    \"url\": 'room_url'\n}\n\n// Add your own rooms\nlet rooms = [\n    {\n        \"ScheduleID\": 0,\n        \"name\": \"\",\n        \"devices\": [],\n        \"url\": \"\",\n    }\n];\n\n/////////////////////////////////////////////\n/////////////// DO NOT MODIFY ///////////////\n/////////////////////////////////////////////\n\nflow.set('g_startTime', Date.now());\nflow.set('g_nbRooms', rooms.length);\nflow.set('g_roomCounter', 0);\nflow.set('g_rooms', rooms);\n\n\n// Send each room information as an individual msg\nfor (let j=0; j<rooms.length; j++) {\n    msg.roomInfo = rooms[j];\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "8fc8b6dee95b7531"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "eec987585316a9a2",
        "type": "inject",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Inject rooms",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 75,
        "y": 160,
        "wires": [
            [
                "ce26a079b584e4e0"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": false
    },
    {
        "id": "01427745cb339161",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Add settings",
        "func": "let roomInfo = msg.roomInfo[0];\n// node.warn(roomInfo);\n\n// Add non mandatory information\nif (!roomInfo.hasOwnProperty(\"preview\")){\n    roomInfo[\"preview\"] = flow.get('g_preview');\n}\n\nif (!roomInfo.hasOwnProperty(\"pastview\")){\n    roomInfo[\"pastview\"] = flow.get('g_pastview');\n}\n\nif (!roomInfo.hasOwnProperty(\"timezone\")){\n    roomInfo[\"timezone\"] = flow.get('g_timeZone');\n}\n\nif (!roomInfo.hasOwnProperty(\"sorted\")){\n    roomInfo[\"sorted\"] = flow.get('g_sorted');\n}\n\nif (!roomInfo.hasOwnProperty(\"name\")){\n    node.warn(`The room has no name. Details: ${roomInfo}\\nThe room is now called NoNameRoom`);\n    roomInfo[\"name\"] = \"NoNameRoom\";\n}\n\nif (!roomInfo.hasOwnProperty(\"url\") || !roomInfo.hasOwnProperty(\"ScheduleID\")) {\n    node.error(`The room ${roomInfo.name} has no url or ScheduleID`);\n    return null;\n}\n\nmsg[\"ScheduleID\"] = roomInfo.ScheduleID;\nmsg[\"preview\"] = roomInfo.preview;\nmsg[\"pastview\"] = roomInfo.pastview;\nmsg[\"timezone\"] = roomInfo.timezone;\nmsg[\"url\"] = roomInfo.url;\nmsg[\"transmitTime\"] = Date.now();\n\nnode.warn(roomInfo.name + \" successfully handled\")\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "7e4c44fab067bd25"
            ]
        ]
    },
    {
        "id": "9f7c7819c943a0b7",
        "type": "queue",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "",
        "input": "roomInfo",
        "inputType": "msg",
        "addFields": "\"\"",
        "addFieldsType": "json",
        "pourType": "initial",
        "pourTypeType": "pourType",
        "pourTime": "",
        "pourTimeType": "num",
        "pourAmount": "1",
        "pourAmountType": "num",
        "maxUseMemory": "",
        "x": 350,
        "y": 240,
        "wires": [
            [
                "01427745cb339161"
            ]
        ]
    },
    {
        "id": "7e4c44fab067bd25",
        "type": "ical-upcoming",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "confignode": "69e2446e74ca44e9",
        "timeout": "",
        "timeoutUnits": "seconds",
        "cron": "",
        "name": "Get room calendar",
        "offsettype": "",
        "offset": "",
        "offsetUnitstype": "",
        "offsetUnits": "",
        "eventtypes": "events",
        "eventtypestype": "eventtypes",
        "calendar": "",
        "calendartype": "str",
        "triggertype": "trigger",
        "trigger": "always",
        "timezone": "",
        "timezonetype": "str",
        "dateformat": "{ \"timeStyle\": \"short\", \"dateStyle\": \"short\" }",
        "dateformattype": "json",
        "language": "en",
        "languagetype": "language",
        "filterProperty": "summary",
        "filterPropertytype": "filterProperty",
        "filterOperator": "between",
        "filterOperatortype": "filterOperator",
        "filtertype": "str",
        "filter2type": "str",
        "filter2": "",
        "filter": "",
        "checkall": false,
        "endpreview": "",
        "endpreviewUnits": "",
        "previewtype": "num",
        "preview": "",
        "previewUnitstype": "previewUnits",
        "previewUnits": "days",
        "pastviewtype": "num",
        "pastview": "",
        "pastviewUnits": "days",
        "pastviewUnitstype": "pastviewUnits",
        "x": 670,
        "y": 240,
        "wires": [
            [
                "abc286970b71e6db"
            ]
        ]
    },
    {
        "id": "09a87c83284c7e9e",
        "type": "inject",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Force dequeue",
        "props": [
            {
                "p": "dequeue",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "8fc8b6dee95b7531"
            ]
        ]
    },
    {
        "id": "154363a51770461f",
        "type": "http request",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "c1fc527789e0bc0d",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "f1f9ff017502cf59",
                "aadefafb49851b96"
            ]
        ]
    },
    {
        "id": "abc286970b71e6db",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Create JSON from iCal + POST Special event",
        "func": "\nlet setTempOccup = flow.get('g_tempOccupied');\nlet setTempUnOccup = flow.get('g_tempUnOccupied');\n\n// DO NOT MODIFY\nlet length = msg.total;\nlet jsonObj = {};\nlet events = [];\n\nif (msg.error) {\n    node.error(msg.error.name + ': ' + msg.error.message + '. Impossible to process the calendar.');\n    return {\n        \"method\": \"HALLO!\",\n        \"url\": \"no/url\",\n        \"roomInfo\": msg\n    };\n}\n\n// Catch all the events\nfor (let i = 0; i < length; i++) {\n\n    // Get event information\n    let name = msg.payload[i].summary;\n    let description = msg.payload[i].description;\n    let eventStart = new Date(msg.payload[i].eventStart);\n    let eventEnd = new Date(msg.payload[i].eventEnd);\n    let contentRmEvent = flow.get('g_contentRmEvent');\n    let eventAlreadyExists = false;\n\n    if (flow.get('g_dailySchedule')) {\n        if (contentRmEvent.some(element => description.includes(element))) eventAlreadyExists = true; // Skip SOBRIETE ENERGETIQUE events\n        else {\n            let start = 0;\n            if (msg.sorted) {\n                start = events.length - 1; // Last event should be the previous one\n            }\n            for (let j = start; j < events.length; j++) {\n                if (eventStart.getDate() == events[j].start.getDate() &&\n                    eventStart.getMonth() == events[j].start.getMonth() &&\n                    eventStart.getFullYear() == events[j].start.getFullYear()) {\n\n                    // Group same day events into only one event\n                    if (eventStart < events[j].start) events[j].start = eventStart;\n                    if (eventEnd > events[j].end) events[j].end = eventEnd;\n                    eventAlreadyExists = true;\n                    events[j].name += ' AND ' + name;\n                }\n            }\n        }\n\n    }\n\n    if (!eventAlreadyExists) {\n        events.push({\n            name: name,\n            start: eventStart,\n            end: eventEnd\n        })\n    };\n};\n\n// Store the events and payload build\nfor (let j = 0; j < events.length; j++) {\n    let name = events[j].name;\n    let day = events[j].start.getDate();\n    let month = events[j].start.getMonth() + 1; // January gives 0\n    let year = events[j].start.getFullYear();\n    let start;\n    let end;\n\n    // Add offset for 1 event/day schedule\n    if (flow.get('g_dailySchedule')) {\n        start = new Date(events[j].start.valueOf() - flow.get('g_timeOffsetBeforeStart') * 60000).toLocaleTimeString(\"fr-FR\", { timeZone: flow.get('g_timeZone') });\n        end = new Date(events[j].end.valueOf() - flow.get('g_timeOffsetBeforeEnd') * 60000).toLocaleTimeString(\"fr-FR\", { timeZone: flow.get('g_timeZone') });\n    }\n    else {\n        start = events[j].start.toLocaleTimeString(\"fr-FR\", { timeZone: flow.get('g_timeZone') });\n        end = events[j].end.toLocaleTimeString(\"fr-FR\", { timeZone: flow.get('g_timeZone') });\n    }\n\n    // Creating string\n    let message = `{ \"${Number(j + 1)}\": {\n        \"event-priority\": 16, \n        \"period\": { \n            \"date\": {\n                \"month\": ${month}, \n                \"year\": ${year}, \n                \"day-of-month\": ${day}\n            }, \n            \"type\": \"Date\" \n        }, \n        \"name\": \"${name}\", \n        \"transitions\": { \n            \"1\": { \"time\": \"${start}\", \"value\": ${setTempOccup}, \"key\": \"1\" },  \n            \"2\": { \"time\": \"${end}\", \"value\": null, \"key\": \"2\" } \n        }, \n        \"key\": \"${Number(j + 1)}\" \n    }}`;\n\n    let jsonTemp = JSON.parse(message);     // Transform string into an object\n    jsonObj = { ...jsonObj, ...jsonTemp };   // Merge with the previous object\n};\n\nlet request = {\n    \"method\": \"POST\",\n    \"url\": `https://${flow.get('g_controllerIP')}/api/rest/v2/services/bacnet/local/objects/schedules/${msg.ScheduleID}/special-events`,\n    \"headers\": {\n        Authorization: flow.get('g_akey'),\n        ContentType: \"application/json\"\n    },\n    \"payload\": jsonObj,\n    \"roomInfo\": msg\n};\n\nreturn request;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 240,
        "wires": [
            [
                "154363a51770461f"
            ]
        ]
    },
    {
        "id": "a33626d5a9cd290d",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Server's reply",
        "func": "let roomInfo = msg.roomInfo;\nlet msgCorrect = false;\n\nswitch (msg.statusCode) {\n    case 200:\n        node.warn(`Successfully transmitted to the server. Process time = ${Date.now() - roomInfo.transmitTime} ms`);\n        msgCorrect = true;\n        break;\n    case 400:\n        node.error(\"Error 400: Bad HTTP Request\");\n        if (msg.payload.includes(\"write-access-denied\")) {\n            node.error(\"Error: Trying to write a Read Only object (analogInput)\");\n        }\n        break;\n    case 401:\n        node.error(\"Error 401: Can't connect to controller: Authorization error\");\n        break;\n    case 500:\n        node.error(\"Error 500: Server Error 500\");\n        break;\n    case 404:\n        node.error(\"Error 404\");\n        break;\n    case \"ETIMEDOUT\":\n        node.error(\"Error: Can't connect to controller: TimeOut\");\n        break;\n    case 501:\n        node.error(\"Error 501. Not recognized request methode. Server not capable of supporting it for any resource\")\n        break;\n    case \"ENOTFOUND\":\n        node.error(\"RequestError: no url found. Please correct the url\")\n}\n\n// Debug information\nlet nbRooms = flow.get('g_nbRooms');\nflow.set('g_roomCounter', flow.get('g_roomCounter') + 1);\nlet roomCounter = flow.get('g_roomCounter');\n\nif (roomCounter == nbRooms && msgCorrect) {\n    node.warn(`All rooms processed in ${(Date.now() - flow.get('g_startTime')) / 1000} s`);\n}\nelse if (!msgCorrect) {\n    node.error(\"Schedule configuration not properly processed\");\n}\n\nmsg.dequeue = true;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2699,
        "y": 208,
        "wires": [
            []
        ]
    },
    {
        "id": "aadefafb49851b96",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "BACnet Schedule Exist ?",
        "func": "let room = msg.roomInfo;\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Continue. \n    // Case 404 : \"Not Found\" > Create Objects.\n    //////////////////////////////////////////////////\n    case 200:\n        return [msg, null];\n        \n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        if (msg.payload.includes(\"write-access-denied\")) {\n            node.error(\"Error : Trying to write a Read Only object (analogInput)\");\n        }\n        return [null, null];\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        return [null, null];\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        return [null, null];\n\n    case 404:\n        if (msg.payload.includes(\"Not Found\")) {\n             return [null,msg];      // Create Schedules Objects\n        }else{\n            node.error(\"Error : 404\");  // Stops here\n            return [null, null];\n        } \n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        return [null, null];\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        return [null, null];\n\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1485,
        "y": 215,
        "wires": [
            [
                "94d1af7d10ef3427"
            ],
            [
                "55f518b184830a4b"
            ]
        ],
        "outputLabels": [
            "Yes",
            "No"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "55f518b184830a4b",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "13c6eacf9e333b84",
        "name": "CREATE Objects",
        "func": "\nlet room = msg.roomInfo;\nlet offset = flow.get(\"g_offset\");\nlet scheduleID = room.roomInfo[0].ScheduleID;\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/57jbx8w/create-objects-multiple\n  ///////////////////////////////////////////////////////////\n\n\n    /**********  Objects creation on the controller\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + flow.get('$parent.g_controllerIP') +\"/api/rest/v2/batch\",\n        \"headers\": {Authorization: flow.get('$parent.g_httpAuthentication'),\n                  ContentType: \"application/json\"}\n        \"payload\":{\n            \"requests\": [\n                {\n                  \"id\": \"1\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"AnalogValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiAVTest10\"\n                  }\n                },\n                {\n                  \"id\": \"2\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"BinaryValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiBVTest10\"\n                  }\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n\n    let request = [];\n\n\nlet temp = '{ \"id\": \"1\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"Schedule\", \"instance-number\": ' + scheduleID + ', \"name\": \"' + room.roomInfo[0].name + '\" }}';\nrequest.push(JSON.parse(temp));\ntemp = '{ \"id\": \"2\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"analogValue\", \"instance-number\": ' + (scheduleID + offset) + ', \"name\": \"' + room.roomInfo[0].name + ' room analog-value\" }}';\nrequest.push(JSON.parse(temp));\n    \n\n    // Return HTTP Request\n    return {\n      \"method\": \"POST\",\n      \"url\": \"https://\" + flow.get('g_controllerIP') + \"/api/rest/v2/batch\",\n      \"headers\": {\n        Authorization: flow.get('g_akey'),\n        ContentType: \"application/json\"\n      },\n      \"payload\": { \"requests\": request },\n      \"roomInfo\": room\n    }\n\n  \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1745,
        "y": 255,
        "wires": [
            [
                "3625f062216a0953"
            ]
        ]
    },
    {
        "id": "3625f062216a0953",
        "type": "http request",
        "z": "8c463de0ec7f8b06",
        "g": "13c6eacf9e333b84",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1945,
        "y": 255,
        "wires": [
            [
                "723328a827910754",
                "fde696686bae0215"
            ]
        ]
    },
    {
        "id": "723328a827910754",
        "type": "debug",
        "z": "8c463de0ec7f8b06",
        "name": "debug HTTP Create schedule",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2204,
        "y": 363,
        "wires": []
    },
    {
        "id": "fde696686bae0215",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "13c6eacf9e333b84",
        "name": "WRITE object properties",
        "func": "\n// This request writes a new schedule-default value in the specified schedule instance.\nvar request = {\n    \"method\": \"POST\",\n    \"url\": \"https://\" + flow.get('g_controllerIP') + \"/api/rest/v2/services/bacnet/local/objects/schedules/\" + msg.roomInfo.ScheduleID,\n    \"headers\": {Authorization: flow.get('g_akey'),\n                ContentType: \"application/json\"},\n    \"payload\": {\n                \"schedule-default\": flow.get('g_tempUnOccupied'),\n    },\n    \"roomInfo\": msg.roomInfo\n};\n\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2197,
        "y": 255,
        "wires": [
            [
                "3242bf47a45d991f"
            ]
        ]
    },
    {
        "id": "3242bf47a45d991f",
        "type": "http request",
        "z": "8c463de0ec7f8b06",
        "g": "13c6eacf9e333b84",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2421,
        "y": 255,
        "wires": [
            [
                "4dc13d830ed350a5",
                "94d1af7d10ef3427"
            ]
        ]
    },
    {
        "id": "4dc13d830ed350a5",
        "type": "debug",
        "z": "8c463de0ec7f8b06",
        "name": "debug HTTP write schedule properties",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2662,
        "y": 365,
        "wires": []
    },
    {
        "id": "171a7b62cff423b0",
        "type": "complete",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "Operation complete",
        "scope": [
            "a33626d5a9cd290d"
        ],
        "uncaught": false,
        "x": 130,
        "y": 300,
        "wires": [
            [
                "09d17ff53d09ca2e"
            ]
        ]
    },
    {
        "id": "09d17ff53d09ca2e",
        "type": "change",
        "z": "8c463de0ec7f8b06",
        "g": "27906eb4db4d93ff",
        "name": "dequeue",
        "rules": [
            {
                "t": "set",
                "p": "dequeue",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 300,
        "wires": [
            [
                "8fc8b6dee95b7531"
            ]
        ]
    },
    {
        "id": "e620980c278637a9",
        "type": "queue",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "",
        "input": "request",
        "inputType": "msg",
        "addFields": "{}",
        "addFieldsType": "json",
        "pourType": "initial",
        "pourTypeType": "pourType",
        "pourTime": "",
        "pourTimeType": "num",
        "pourAmount": "1",
        "pourAmountType": "num",
        "maxUseMemory": "",
        "x": 590,
        "y": 580,
        "wires": [
            [
                "f00f02f9dab074d3"
            ]
        ]
    },
    {
        "id": "c8b02852c9fb74ab",
        "type": "complete",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "HTTP request complete",
        "scope": [
            "9e4f9a43ec8b20d9"
        ],
        "uncaught": false,
        "x": 265,
        "y": 541,
        "wires": [
            [
                "5c82cc8d2f0acc82"
            ]
        ]
    },
    {
        "id": "5c82cc8d2f0acc82",
        "type": "change",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "dequeue",
        "rules": [
            {
                "t": "set",
                "p": "dequeue",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 451,
        "y": 541,
        "wires": [
            [
                "e620980c278637a9"
            ]
        ]
    },
    {
        "id": "f00f02f9dab074d3",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "572830bf5120ad8c",
        "name": "rebuild msg",
        "func": "msg = { \n    \"method\": msg.request[0].method, \n    \"url\": msg.request[0].url, \n    \"headers\": msg.request[0].headers, \n    \"payload\": msg.request[0].payload,\n    \"requestTimeout\": msg.request[0].requestTimeout\n     }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 580,
        "wires": [
            [
                "9e4f9a43ec8b20d9"
            ]
        ]
    },
    {
        "id": "b180368dd2db5874",
        "type": "debug",
        "z": "8c463de0ec7f8b06",
        "name": "debug HTTP binding",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 640,
        "wires": []
    },
    {
        "id": "062fc0515f6be6e5",
        "type": "inject",
        "z": "8c463de0ec7f8b06",
        "g": "3defac0f4914dc28",
        "name": "Link",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 75,
        "y": 400,
        "wires": [
            [
                "ead34e9802176f01"
            ]
        ],
        "l": false
    },
    {
        "id": "ead34e9802176f01",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "3defac0f4914dc28",
        "name": "GET schedule present value",
        "func": "\nlet rooms = flow.get(\"g_rooms\");\nlet property_references =[];\n\n// This resource gets the present value of the specified Schedule instance.\nfor (let room in rooms) {\n    let temp = '{ \"type\": \"Schedule\", \"instance\": ' + rooms[room][\"ScheduleID\"] + ', \"property\": \"presentValue\"}';\n    property_references.push(JSON.parse(temp));\n}\n\nreturn {\n          \"method\": \"POST\",\n          \"url\": \"https://\" + flow.get(\"g_controllerIP\") + \"/api/rest/v2/services/bacnet/local/objects/read-property-multiple\",\n          \"headers\": {\n            Authorization: flow.get(\"g_akey\"),\n            ContentType: \"application/json\"\n          },\n          \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n          },\n          \"requestTimeout\": 5000,\n        }\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 400,
        "wires": [
            [
                "3e3522d6dab50c40"
            ]
        ]
    },
    {
        "id": "3e3522d6dab50c40",
        "type": "http request",
        "z": "8c463de0ec7f8b06",
        "g": "3defac0f4914dc28",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "0a54777a4b254e96",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 400,
        "wires": [
            [
                "faed5d50f14a02c6",
                "8e6d56d7d6767e9d"
            ]
        ]
    },
    {
        "id": "faed5d50f14a02c6",
        "type": "debug",
        "z": "8c463de0ec7f8b06",
        "name": "Debug HTTP Read schedule",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 460,
        "wires": []
    },
    {
        "id": "8e6d56d7d6767e9d",
        "type": "function",
        "z": "8c463de0ec7f8b06",
        "g": "3defac0f4914dc28",
        "name": "WRITE Analog Values",
        "func": "let rooms = flow.get(\"g_rooms\");\nlet results = msg.results;\nlet setpoint;\nlet offset = flow.get(\"g_offset\");; \nlet property_references = [];\n\n\nfor (let result in results) {\n  //Set the correct value\n  if (results[result].value == 2) {\n    setpoint = flow.get(\"g_tempUnOccupied\");\n  } else {\n    setpoint = results[result].value;\n  }\n\n  let temp = '{ \"type\": \"analogValue\", \"instance\": ' + (offset + results[result].instance)  + ', \"property\": \"presentValue\", \"value\": ' + setpoint + ' }';\n  property_references.push(JSON.parse(temp));\n      \n}\n\n\n// Return HTTP Request\nreturn {\n  \"method\": \"POST\",\n  \"url\": \"https://\" + flow.get(\"g_controllerIP\") + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n  \"headers\": {\n    Authorization: flow.get(\"g_akey\"),\n    ContentType: \"application/json\"\n  },\n  \"payload\": {\n    \"encode\": \"text\",\n    \"property-references\": property_references\n  },\n  \"requestTimeout\": 5000,\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 400,
        "wires": [
            [
                "b2de50d710e0d240"
            ]
        ]
    },
    {
        "id": "b2de50d710e0d240",
        "type": "http request",
        "z": "8c463de0ec7f8b06",
        "g": "3defac0f4914dc28",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "0a54777a4b254e96",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 400,
        "wires": [
            [
                "553eb89b614c2f90"
            ]
        ]
    },
    {
        "id": "553eb89b614c2f90",
        "type": "debug",
        "z": "8c463de0ec7f8b06",
        "name": "Debug HTTP Write Analog Values",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 460,
        "wires": []
    },
    {
        "id": "c1fc527789e0bc0d",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "69e2446e74ca44e9",
        "type": "ical-config",
        "url": "",
        "caldav": "",
        "caltype": "ical",
        "name": "",
        "replacedates": false,
        "usecache": false,
        "username": "",
        "password": "",
        "experimental": false,
        "calendar": "",
        "pastWeeks": "0",
        "futureWeeks": "4"
    },
    {
        "id": "38c4db63982e52db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "0a54777a4b254e96",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]