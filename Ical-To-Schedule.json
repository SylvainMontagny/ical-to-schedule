[
    {
        "id": "a30c605e1c5f198e",
        "type": "subflow",
        "name": "Delete disabled Schedule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "ddbf59a57ca066c8"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 980,
            "y": 200,
            "wires": [
                {
                    "id": "a47f95e4a97e37cc",
                    "port": 0
                },
                {
                    "id": "a3e1f24724ff2981",
                    "port": 0
                },
                {
                    "id": "b9fbf9d1182d0bc1",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ddbf59a57ca066c8",
        "type": "function",
        "z": "a30c605e1c5f198e",
        "name": "Delete disabled Schedules",
        "func": "let rooms = flow.get(\"$parent.f_rooms\");\nlet schedulesAVOffset = flow.get(\"$parent.f_schedulesAVOffset\");\nlet controllerIP = flow.get('$parent.f_controllerIP');\nlet authKey = flow.get('$parent.f_akey');\nlet request = [];\n\nlet idNum = 1 ;\n\nfor (let r in rooms){\n  let room = rooms[r];\n  let deviceObject = room.devices;\n  if(!room.isActive){\n    let temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/schedules/${room.scheduleID}\"}`;\n    request.push(JSON.parse(temp));\n    idNum++;\n    temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/analog-values/${room.scheduleID + schedulesAVOffset}\"}`;\n    request.push(JSON.parse(temp));\n    idNum++;\n    for (let device in deviceObject) {\n      deviceObject[device].forEach(deviceNum => {\n        temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/events/bindings/${room.scheduleID}_${room.scheduleName}_${device}_${deviceNum}\"}`;\n        request.push(JSON.parse(temp));\n        idNum++;\n      });\n    }\n  }\n}\n\n// Return HTTP Request\nreturn {\n  \"method\": \"POST\",\n  \"url\": \"https://\" + controllerIP + \"/api/rest/v2/batch\",\n  \"headers\": {\n    Authorization: authKey,\n    ContentType: \"application/json\"\n  },\n  \"payload\": { \"requests\": request }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "f326cf2aa5e47f01"
            ]
        ]
    },
    {
        "id": "f326cf2aa5e47f01",
        "type": "http request",
        "z": "a30c605e1c5f198e",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 80,
        "wires": [
            [
                "99a0079da1a22b09",
                "a47f95e4a97e37cc"
            ]
        ]
    },
    {
        "id": "99a0079da1a22b09",
        "type": "function",
        "z": "a30c605e1c5f198e",
        "name": "GET all Bindings",
        "func": "let controllerIP = flow.get('$parent.f_controllerIP');\nlet authKey = flow.get('$parent.f_akey');\n\nvar request = {\n    \"method\": \"GET\",\n    \"url\": \"https://\" + controllerIP + \"/api/rest/v2/services/events/bindings\",\n    \"headers\": { Authorization: authKey }\n};\n\nreturn request;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "8178338a617ed97f"
            ]
        ]
    },
    {
        "id": "8178338a617ed97f",
        "type": "http request",
        "z": "a30c605e1c5f198e",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 140,
        "wires": [
            [
                "c5c79bd7e7592890"
            ]
        ]
    },
    {
        "id": "c5c79bd7e7592890",
        "type": "function",
        "z": "a30c605e1c5f198e",
        "name": "delete unused bindings",
        "func": "let bindings = msg.payload;\nlet bindingsKeys = Object.keys(bindings);\nlet rooms = flow.get(\"$parent.f_rooms\");\nlet scheduleRange = flow.get(\"$parent.f_scheduleRange\");\nlet schedulesAVOffset = flow.get(\"$parent.f_schedulesAVOffset\");\nlet controllerIP = flow.get('$parent.f_controllerIP');\nlet authKey = flow.get('$parent.f_akey');\nlet request = [];\n\nlet idNum = 1;\n\nfunction isARoomDevice(room,device) {\n    for (let dev in room.devices) {\n        if (dev === device) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\n\nfor (let r in rooms) {\n    let room = rooms[r];\n    let roomName = room.scheduleName\n    let deviceObject = room.devices;\n    if (room.isActive) {\n        \n        bindingsKeys.forEach(binding => {\n\n            const match = binding.match(/^(.*)_(.*)_(.*)_(\\d+)$/);\n            if (binding.startsWith(`${match[1]}_${roomName}`) && match[1] < scheduleRange[1] && match[1] > scheduleRange[0]) {\n\n                if (isARoomDevice(room,match[3])) {\n\n                    if (!(deviceObject[match[3]].some(deviceNum => deviceNum == match[4]))) {\n\n                        let temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/events/bindings/${match[1]}_${roomName}_${match[3]}_${match[4]}\"}`;\n                        request.push(JSON.parse(temp));\n                        idNum++;\n                    }\n                } else {\n\n                    let temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/events/bindings/${match[1]}_${roomName}_${match[3]}_${match[4]}\"}`;\n                    request.push(JSON.parse(temp));\n                    idNum++;\n                }\n\n            }\n        });\n    }\n}\n// Return HTTP Request\nreturn {\n    \"method\": \"POST\",\n    \"url\": \"https://\" + controllerIP + \"/api/rest/v2/batch\",\n    \"headers\": {\n        Authorization: authKey,\n        ContentType: \"application/json\"\n    },\n    \"payload\": { \"requests\": request },\n    \"bindings\": bindingsKeys\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "687f0a2aa1ad6ccf"
            ]
        ]
    },
    {
        "id": "687f0a2aa1ad6ccf",
        "type": "http request",
        "z": "a30c605e1c5f198e",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 200,
        "wires": [
            [
                "b9fbf9d1182d0bc1",
                "180135ecd6cc2aca"
            ]
        ]
    },
    {
        "id": "a47f95e4a97e37cc",
        "type": "change",
        "z": "a30c605e1c5f198e",
        "name": "inactive rooms object deleted",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "Inactive rooms object deleted...",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "ring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a3e1f24724ff2981",
        "type": "change",
        "z": "a30c605e1c5f198e",
        "name": "inactive rooms object deleted",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "Inactive rooms object and remaining unused object deleted",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "dot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ba0be9bb5896c3ff",
        "type": "function",
        "z": "a30c605e1c5f198e",
        "name": "Delete Schedules",
        "func": "let schedules = Object.keys(msg.payload);\nlet bindings = msg.bindings;\nlet rooms = flow.get(\"$parent.f_rooms\");\nlet schedulesAVOffset = flow.get(\"$parent.f_schedulesAVOffset\");\nlet controllerIP = flow.get('$parent.f_controllerIP');\nlet authKey = flow.get('$parent.f_akey');\nlet roomsID = [];\nlet request = [];\n\nlet idNum = 1 ;\nfor (let room in rooms) {\n  roomsID.push(rooms[room].scheduleID);\n}\n\nschedules.forEach( schedule => {\n\n  if(!(roomsID.some(room => room == schedule))){\n    let temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/schedules/${schedule}\"}`;\n    request.push(JSON.parse(temp));\n    idNum++;\n    temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/analog-values/${schedule + schedulesAVOffset}\"}`;\n    request.push(JSON.parse(temp));\n    idNum++;\n    bindings.forEach(binding => {\n      if (binding.startsWith(`${schedule}_`)){\n      temp = `{ \"id\": \"${idNum}\", \"method\": \"DELETE\", \"url\": \"/api/rest/v2/services/events/bindings/${binding}\"}`;\n      request.push(JSON.parse(temp));\n      idNum++;\n      }\n    });\n  }\n});\n\n// Return HTTP Request\nreturn {\n  \"method\": \"POST\",\n  \"url\": \"https://\" + controllerIP + \"/api/rest/v2/batch\",\n  \"headers\": {\n    Authorization: authKey,\n    ContentType: \"application/json\"\n  },\n  \"payload\": { \"requests\": request }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 320,
        "wires": [
            [
                "dbb44145b6912fb8"
            ]
        ]
    },
    {
        "id": "dbb44145b6912fb8",
        "type": "http request",
        "z": "a30c605e1c5f198e",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "a3e1f24724ff2981"
            ]
        ]
    },
    {
        "id": "b9fbf9d1182d0bc1",
        "type": "change",
        "z": "a30c605e1c5f198e",
        "name": "inactive rooms object deleted",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "Inactive rooms object deleted...",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "ring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "180135ecd6cc2aca",
        "type": "function",
        "z": "a30c605e1c5f198e",
        "name": "GET all Schedules",
        "func": "let controllerIP = flow.get('$parent.f_controllerIP');\nlet authKey = flow.get('$parent.f_akey');\n\nvar request = {\n    \"method\": \"GET\",\n    \"url\": \"https://\" + controllerIP + \"/api/rest/v2/services/bacnet/local/objects/schedules\",\n    \"headers\": { Authorization: authKey },\n    \"bindings\": msg.bindings\n};\n\nreturn request;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 260,
        "wires": [
            [
                "98dbf19b29c3e5ae"
            ]
        ]
    },
    {
        "id": "98dbf19b29c3e5ae",
        "type": "http request",
        "z": "a30c605e1c5f198e",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "ba0be9bb5896c3ff"
            ]
        ]
    },
    {
        "id": "8f30be050e0d0566",
        "type": "subflow",
        "name": "Write Schedule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 160,
                "wires": [
                    {
                        "id": "30f6749a16874590"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 160,
                "wires": [
                    {
                        "id": "6af7d7fcbd1da40b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "30f6749a16874590",
        "type": "change",
        "z": "8f30be050e0d0566",
        "name": "rebuild msg",
        "rules": [
            {
                "t": "set",
                "p": "scheduleID",
                "pt": "msg",
                "to": "msg.roomInfo[0].scheduleID",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "preview",
                "pt": "msg",
                "to": "msg.roomInfo[0].preview",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "pastview",
                "pt": "msg",
                "to": "msg.roomInfo[0].pastview",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "timezone",
                "pt": "msg",
                "to": "msg.roomInfo[0].timezone",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "msg.roomInfo[0].url",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "transmitTime",
                "pt": "msg",
                "to": "object",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 160,
        "wires": [
            [
                "ccb5cb89186d5927"
            ]
        ]
    },
    {
        "id": "ccb5cb89186d5927",
        "type": "ical-upcoming",
        "z": "8f30be050e0d0566",
        "confignode": "69e2446e74ca44e9",
        "timeout": "",
        "timeoutUnits": "seconds",
        "cron": "",
        "name": "Get room calendar",
        "offsettype": "",
        "offset": "",
        "offsetUnitstype": "",
        "offsetUnits": "",
        "eventtypes": "events",
        "eventtypestype": "eventtypes",
        "calendar": "",
        "calendartype": "str",
        "triggertype": "trigger",
        "trigger": "always",
        "timezone": "",
        "timezonetype": "str",
        "dateformat": "{ \"timeStyle\": \"short\", \"dateStyle\": \"short\" }",
        "dateformattype": "json",
        "language": "en",
        "languagetype": "language",
        "filterProperty": "summary",
        "filterPropertytype": "filterProperty",
        "filterOperator": "between",
        "filterOperatortype": "filterOperator",
        "filtertype": "str",
        "filter2type": "str",
        "filter2": "",
        "filter": "",
        "checkall": false,
        "endpreview": "",
        "endpreviewUnits": "",
        "previewtype": "num",
        "preview": "",
        "previewUnitstype": "previewUnits",
        "previewUnits": "days",
        "pastviewtype": "num",
        "pastview": "",
        "pastviewUnits": "days",
        "pastviewUnitstype": "pastviewUnits",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "6702bb7c953bc653"
            ]
        ]
    },
    {
        "id": "6702bb7c953bc653",
        "type": "function",
        "z": "8f30be050e0d0566",
        "name": "POST Special event",
        "func": "\nconst setTempOccup = msg.roomInfo[0].tempOccupied;\nconst setTempUnOccup = msg.roomInfo[0].tempUnOccupied;\nlet scheduleName = msg.roomInfo[0].scheduleName;\nconst timeZone = msg.roomInfo[0].timezone;\nconst timeOffsetBeforeStart = flow.get('$parent.f_timeOffsetBeforeStart');\nconst timeOffsetBeforeEnd = flow.get('$parent.f_timeOffsetBeforeEnd');\nconst dailySchedule = flow.get('$parent.f_dailySchedule');\nconst controllerIP = flow.get('$parent.f_controllerIP');\nconst authKey = flow.get('$parent.f_akey');\nconst scheduleID = msg.scheduleID;\n\n// DO NOT MODIFY\nlet length = msg.total;\nlet jsonObj = {};\nlet events = [];\n\nif (msg.error) {\n    node.error(msg.error.name + ': ' + msg.error.message + '. Impossible to process the calendar.');\n    return null;\n}\n\n// Catch all the events\nfor (let i = 0; i < length; i++) {\n\n    // Get event information\n    let name = msg.payload[i].summary;\n    let description = msg.payload[i].description;\n    let eventStart = new Date(msg.payload[i].eventStart);\n    let eventEnd = new Date(msg.payload[i].eventEnd);\n    let contentRmEvent = flow.get('$parent.f_contentRmEvent');\n    let eventAlreadyExists = false;\n\n    if (dailySchedule) {\n        if (contentRmEvent.some(element => description?.includes(element))) eventAlreadyExists = true; // Skip SOBRIETE ENERGETIQUE events\n        else {\n            let start = 0;\n            if (msg.sorted) {\n                start = events.length - 1; // Last event should be the previous one\n            }\n            for (let j = start; j < events.length; j++) {\n                if (eventStart.getDate() == events[j].start.getDate() &&\n                    eventStart.getMonth() == events[j].start.getMonth() &&\n                    eventStart.getFullYear() == events[j].start.getFullYear()) {\n\n                    // Group same day events into only one event\n                    if (eventStart < events[j].start) events[j].start = eventStart;\n                    if (eventEnd > events[j].end) events[j].end = eventEnd;\n                    eventAlreadyExists = true;\n                    events[j].name += ' AND ' + name;\n                }\n            }\n        }\n\n    }\n\n    if (!eventAlreadyExists) {\n        events.push({\n            name: name,\n            start: eventStart,\n            end: eventEnd\n        })\n    };\n};\n\n// Store the events and payload build\nfor (let j = 0; j < events.length; j++) {\n    let name = events[j].name;\n    let day = events[j].start.getDate();\n    let month = events[j].start.getMonth() + 1; // January gives 0\n    let year = events[j].start.getFullYear();\n    let start;\n    let end;\n\n    // Add offset for 1 event/day schedule\n    if (dailySchedule) {\n        start = new Date(events[j].start.valueOf() - timeOffsetBeforeStart * 60000).toLocaleTimeString(\"fr-FR\", { timeZone: timeZone });\n        end = new Date(events[j].end.valueOf() - timeOffsetBeforeEnd * 60000).toLocaleTimeString(\"fr-FR\", { timeZone: timeZone });\n    }\n    else {\n        start = events[j].start.toLocaleTimeString(\"fr-FR\", { timeZone: timeZone });\n        end = events[j].end.toLocaleTimeString(\"fr-FR\", { timeZone: timeZone });\n    }\n\n    // Creating string\n    let message = `{ \"${Number(j + 1)}\": {\n        \"event-priority\": 16, \n        \"period\": { \n            \"date\": {\n                \"month\": ${month}, \n                \"year\": ${year}, \n                \"day-of-month\": ${day}\n            }, \n            \"type\": \"Date\" \n        }, \n        \"name\": \"${name}\", \n        \"transitions\": { \n            \"1\": { \"time\": \"${start}\", \"value\": ${setTempOccup}, \"key\": \"1\" },  \n            \"2\": { \"time\": \"${end}\", \"value\": null, \"key\": \"2\" } \n        }, \n        \"key\": \"${Number(j + 1)}\" \n    }}`;\n\n    let jsonTemp = JSON.parse(message);     // Transform string into an object\n    jsonObj = { ...jsonObj, ...jsonTemp };   // Merge with the previous object\n};\n\nlet request = {\n    \"method\": \"POST\",\n    \"url\": `https://${controllerIP}/api/rest/v2/services/bacnet/local/objects/schedules/${scheduleID}`,\n    \"headers\": {\n        Authorization: authKey,\n        ContentType: \"application/json\"\n    },\n    \"payload\": {\n        \"special-events\" : jsonObj,\n        \"object-name\": scheduleName,\n        \"schedule-default\": setTempUnOccup\n    },\n    \"roomInfo\": msg\n};\n\nreturn request;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 160,
        "wires": [
            [
                "6af7d7fcbd1da40b"
            ]
        ]
    },
    {
        "id": "6af7d7fcbd1da40b",
        "type": "http request",
        "z": "8f30be050e0d0566",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "69e2446e74ca44e9",
        "type": "ical-config",
        "url": "",
        "caldav": "",
        "caltype": "ical",
        "name": "",
        "replacedates": false,
        "usecache": false,
        "username": "",
        "password": "",
        "experimental": false,
        "calendar": "",
        "pastWeeks": "0",
        "futureWeeks": "4"
    },
    {
        "id": "fde0a8cadc4afeb6",
        "type": "subflow",
        "name": "Create Schedules",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 180,
                "wires": [
                    {
                        "id": "ae643d4115a5446c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 180,
                "wires": [
                    {
                        "id": "294b05e2316eacf1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ae643d4115a5446c",
        "type": "function",
        "z": "fde0a8cadc4afeb6",
        "g": "ad070132c0ce5549",
        "name": "CREATE Objects",
        "func": "\nlet room = msg.roomInfo;\nlet schedulesAVOffset = flow.get(\"$parent.f_schedulesAVOffset\");\nlet generateScheduleAnalogValues = flow.get(\"$parent.f_createScheduleAV\");\nlet tempUnoccupied = room.roomInfo[0].tempUnOccupied;\nlet scheduleID = room.roomInfo[0].scheduleID;\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/57jbx8w/create-objects-multiple\n  ///////////////////////////////////////////////////////////\n\n\n    /**********  Objects creation on the controller\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + flow.get('$f_controllerIP') +\"/api/rest/v2/batch\",\n        \"headers\": {Authorization: flow.get('f_httpAuthentication'),\n                  ContentType: \"application/json\"}\n        \"payload\":{\n            \"requests\": [\n                {\n                  \"id\": \"1\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"AnalogValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiAVTest10\"\n                  }\n                },\n                {\n                  \"id\": \"2\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"BinaryValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiBVTest10\"\n                  }\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n\n    let request = [];\n\n\nlet temp = '{ \"id\": \"1\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"Schedule\", \"instance-number\": ' + scheduleID + ', \"name\": \"' + room.roomInfo[0].scheduleName + '\" }}';\nrequest.push(JSON.parse(temp));\ntemp = '{ \"id\": \"2\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/schedules/' + scheduleID + '\", \"body\": { \"schedule-default\": ' + tempUnoccupied + ' }}';\nrequest.push(JSON.parse(temp));\nif (generateScheduleAnalogValues)\n{\n  temp = '{ \"id\": \"3\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"analogValue\", \"instance-number\": ' + (scheduleID + schedulesAVOffset) + ', \"name\": \"' + room.roomInfo[0].scheduleName + ' room analog-value\" }}';\n  request.push(JSON.parse(temp));\n}\n\n    // Return HTTP Request\n    return {\n      \"method\": \"POST\",\n      \"url\": \"https://\" + flow.get('$parent.f_controllerIP') + \"/api/rest/v2/batch\",\n      \"headers\": {\n        Authorization: flow.get('$parent.f_akey'),\n        ContentType: \"application/json\"\n      },\n      \"payload\": { \"requests\": request },\n      \"roomInfo\": room\n    }\n\n  \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "294b05e2316eacf1"
            ]
        ]
    },
    {
        "id": "294b05e2316eacf1",
        "type": "http request",
        "z": "fde0a8cadc4afeb6",
        "g": "ad070132c0ce5549",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "2418490b3512393e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ad070132c0ce5549",
        "type": "group",
        "z": "fde0a8cadc4afeb6",
        "name": "Create missing BACnet Schedules",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ae643d4115a5446c",
            "294b05e2316eacf1"
        ],
        "x": 254,
        "y": 139,
        "w": 432,
        "h": 82
    },
    {
        "id": "2418490b3512393e",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "ff477416b0a79e72",
        "type": "tab",
        "label": "Ical-To-Schedule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f55c46d238ce1fe",
        "type": "group",
        "z": "ff477416b0a79e72",
        "name": "Configuration",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "afdcb9ab47522dc1",
            "b416e36624220443",
            "6642241df905751a"
        ],
        "x": 34,
        "y": 59,
        "w": 572,
        "h": 82
    },
    {
        "id": "ff6d80bcde020c52",
        "type": "group",
        "z": "ff477416b0a79e72",
        "name": "Process POST Schedule automate",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "01c9bba14c3a5697",
            "283e975103416336",
            "34d790016980d585",
            "6174c751354a85d1",
            "01fa8b2dda699a9f",
            "18b36d20e025263e",
            "6026bbd195e5b5ae",
            "0a998ed924b9543e",
            "e922a30640ddcfaf"
        ],
        "x": 34,
        "y": 208,
        "w": 1246,
        "h": 173
    },
    {
        "id": "57d168970caef7eb",
        "type": "debug",
        "z": "ff477416b0a79e72",
        "name": "Debug HTTP Write Schedule",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 806,
        "y": 188,
        "wires": []
    },
    {
        "id": "63bf59c6b5d483e5",
        "type": "debug",
        "z": "ff477416b0a79e72",
        "name": "debug HTTP Create schedule",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1204,
        "y": 187,
        "wires": []
    },
    {
        "id": "afdcb9ab47522dc1",
        "type": "function",
        "z": "ff477416b0a79e72",
        "g": "4f55c46d238ce1fe",
        "name": "TO CONFIGURE",
        "func": "//////////////////////////////////////////////\n//////////////// TO CONFIGURE ////////////////\n//////////////////////////////////////////////\n\n// Controller information\nconst controllerIP = \"TO_CONFIGURE\";       // Controller IP Address\nconst controllerLogin = \"TO_CONFIGURE\";            //Apex distech login\nconst controllerPassword = \"TO_CONFIGURE\";  //Apex distech password\n\n// Schedule object information\nconst timeZone = 'Europe/Paris';\nconst dailySchedule = false;                 // Group events in 1 event/day\nconst timeOffsetBeforeStart = 0;            // in min\nconst timeOffsetBeforeEnd = 0;              // in min\nconst contentRmEvent = [\"TO_CONFIGURE\"];      // if DAILY_SCHEDULE is enable, \n                                                    // all events that content this \n                                                    // string in their description \n                                                    // will be ignored\nconst preview = 7;\nconst pastview = 0;\nconst sorted = false;                       // Events are sorted in chronological order.  \n                                            // This helps to reduce algorithm complexity \n                                            // when enable\nconst scheduleRange = [0,100];\n\n// Schedule object values\nconst defaultTempOccupied = 20;\nconst defaultTempUnOccupied = 17;\n\n/////////////////////////////\n/////// Room template ///////\n/////////////////////////////\n/*\n    let rooms = {\n        \"ScheduleID\": 0,    //To use the link correctly make sure to use following numbers and start with 0\n        \"scheduleName\": \"roomName\",\n        \"devices\":{\"micropelt-mlr003\": [1,2,3]}, //device number of LoRaBAC\n        \"url\": 'room_url'\n    }\n*/\n\n// Add your own rooms\nlet rooms = [\n  \n\n];\n\n//  binding values /!\\Not useful to configure if binding is not used/!\\\nconst createScheduleAV = true; //  If enabled will create an analog value for each schedule\nconst schedulesAVOffset = 10000;  //  The starting instance of theses values\nconst deviceList = {\n  \"usmb-valve\": {\n    \"identity\": {\n      \"maxDevNum\": 10\n    },\n    \"controller\": {\n      \"debug\": \"all\"\n    },\n    \"lorawan\": {\n      \"flushDownlinkQueue\": false,\n      \"class\": \"A\"\n    },\n    \"bacnet\": {\n      \"offsetAV\": 0,\n      \"offsetBV\": 0,\n      \"instanceRangeAV\": 10,\n      \"instanceRangeBV\": 0,\n      \"objects\": {\n        \"valveSetpoint\": {\n          \"lorawanPayloadName\": \"valveSetpoint\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 0,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valveTemperature\": {\n          \"lorawanPayloadName\": \"valveTemperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 1,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"controllerSetpoint\": {\n          \"lorawanPayloadName\": \"controllerSetpoint\",\n          \"dataDirection\": \"downlink\",\n          \"downlinkPort\": \"30\",\n          \"assignementMode\": \"auto\",\n          \"downlinkStrategy\": \"compareToUplinkObject\",\n          \"instanceNum\": 2,\n          \"downlinkPortPriority\": \"low\",\n          \"objectType\": \"analogValue\",\n          \"uplinkToCompareWith\": \"valveSetpoint\",\n          \"value\": 20\n        }\n      }\n    },\n    \"mqtt\": {\n      \"topicDownlink\": {}\n    }\n  },\n  \"micropelt-mlr003\": {\n    \"identity\": {\n      \"maxDevNum\": 100\n    },\n    \"controller\": {\n      \"debug\": [\n        \"all\"\n      ]\n    },\n    \"lorawan\": {\n      \"flushDownlinkQueue\": false,\n      \"class\": \"A\"\n    },\n    \"bacnet\": {\n      \"offsetAV\": 200,\n      \"offsetBV\": 0,\n      \"instanceRangeAV\": 10,\n      \"instanceRangeBV\": 5,\n      \"objects\": {\n        \"valveSetpoint\": {\n          \"lorawanPayloadName\": \"User_Value\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 0,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valveTemperature\": {\n          \"lorawanPayloadName\": \"Ambient_Temperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 1,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"usedTemperature\": {\n          \"lorawanPayloadName\": \"Used_Temperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 9,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"currentConsumed\": {\n          \"lorawanPayloadName\": \"Average_Current_Consumed\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 2,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"currentGenerated\": {\n          \"lorawanPayloadName\": \"Average_Current_Generated\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 3,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valvePosition\": {\n          \"lorawanPayloadName\": \"Current_Valve_Position\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 4,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valveFlowTemperature\": {\n          \"lorawanPayloadName\": \"Flow_Temperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 5,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"batteryVoltage\": {\n          \"lorawanPayloadName\": \"Storage_Voltage\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 6,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"ackError\": {\n          \"lorawanPayloadName\": \"Radio_Communication_Error\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 0,\n          \"objectType\": \"binaryValue\",\n          \"value\": null\n        },\n        \"controllerSetpoint\": {\n          \"lorawanPayloadName\": \"setValue\",\n          \"dataDirection\": \"downlink\",\n          \"downlinkPort\": 30,\n          \"assignementMode\": \"auto\",\n          \"downlinkStrategy\": \"compareToUplinkObject\",\n          \"instanceNum\": 7,\n          \"downlinkPortPriority\": \"low\",\n          \"objectType\": \"analogValue\",\n          \"uplinkToCompareWith\": \"valveSetpoint\",\n          \"value\": 20\n        }\n      }\n    },\n    \"mqtt\": {\n      \"topicDownlink\": {}\n    }\n  },\n  \"mclimate-vicki\": {\n    \"identity\": {\n      \"maxDevNum\": 10\n    },\n    \"controller\": {\n      \"debug\": [\n        \"all\"\n      ]\n    },\n    \"lorawan\": {\n      \"flushDownlinkQueue\": false,\n      \"class\": \"A\"\n    },\n    \"bacnet\": {\n      \"offsetAV\": 600,\n      \"offsetBV\": 50,\n      \"instanceRangeAV\": 10,\n      \"instanceRangeBV\": 5,\n      \"objects\": {\n        \"valveSetpoint\": {\n          \"lorawanPayloadName\": \"targetTemperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 0,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valveTemperature\": {\n          \"lorawanPayloadName\": \"sensorTemperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 1,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"controllerSetpoint\": {\n          \"lorawanPayloadName\": \"setTargetTemperature\",\n          \"dataDirection\": \"downlink\",\n          \"downlinkPort\": 30,\n          \"assignementMode\": \"auto\",\n          \"downlinkStrategy\": \"compareToUplinkObject\",\n          \"instanceNum\": 2,\n          \"downlinkPortPriority\": \"low\",\n          \"objectType\": \"analogValue\",\n          \"uplinkToCompareWith\": \"valveSetpoint\",\n          \"value\": 21\n        },\n        \"valvePosition\": {\n          \"lorawanPayloadName\": \"valveOpenness\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 3,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valveChildLock\": {\n          \"lorawanPayloadName\": \"childLock\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 0,\n          \"objectType\": \"binaryValue\",\n          \"value\": null\n        },\n        \"controllerChildLock\": {\n          \"lorawanPayloadName\": \"setChildLock\",\n          \"dataDirection\": \"downlink\",\n          \"downlinkPort\": 30,\n          \"assignementMode\": \"auto\",\n          \"downlinkStrategy\": \"compareToUplinkObject\",\n          \"instanceNum\": 1,\n          \"downlinkPortPriority\": \"low\",\n          \"objectType\": \"binaryValue\",\n          \"uplinkToCompareWith\": \"valveChildLock\",\n          \"value\": true\n        },\n        \"batteryVoltage\": {\n          \"lorawanPayloadName\": \"batteryVoltage\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 4,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"openWindownDetection\": {\n          \"lorawanPayloadName\": \"openWindow\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 2,\n          \"objectType\": \"binaryValue\",\n          \"value\": null\n        },\n        \"valveHumidity\": {\n          \"lorawanPayloadName\": \"relativeHumidity\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 5,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        }\n      }\n    },\n    \"mqtt\": {\n      \"topicDownlink\": {}\n    }\n  },\n  \"milesight-wt101\": {\n    \"identity\": {\n      \"maxDevNum\": 10\n    },\n    \"controller\": {\n      \"debug\": [\n        \"all\"\n      ]\n    },\n    \"lorawan\": {\n      \"flushDownlinkQueue\": false,\n      \"class\": \"A\"\n    },\n    \"bacnet\": {\n      \"offsetAV\": 700,\n      \"offsetBV\": 100,\n      \"instanceRangeAV\": 10,\n      \"instanceRangeBV\": 0,\n      \"objects\": {\n        \"valveSetpoint\": {\n          \"lorawanPayloadName\": \"temperature_target\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 0,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"valveTemperature\": {\n          \"lorawanPayloadName\": \"temperature\",\n          \"dataDirection\": \"uplink\",\n          \"assignementMode\": \"auto\",\n          \"instanceNum\": 1,\n          \"objectType\": \"analogValue\",\n          \"value\": null\n        },\n        \"controllerSetpoint\": {\n          \"lorawanPayloadName\": \"temperature_target\",\n          \"dataDirection\": \"downlink\",\n          \"downlinkPort\": 30,\n          \"assignementMode\": \"auto\",\n          \"downlinkStrategy\": \"compareToUplinkObject\",\n          \"instanceNum\": 2,\n          \"downlinkPortPriority\": \"low\",\n          \"objectType\": \"analogValue\",\n          \"uplinkToCompareWith\": \"valveSetpoint\",\n          \"value\": 20\n        }\n      }\n    },\n    \"mqtt\": {\n      \"topicDownlink\": {}\n    }\n  }\n};\n\n/////////////////////////////////////////////////\n/////////////// DO NOT MODIFY ///////////////////\n/////////////////////////////////////////////////\n\n//////  Range check //////\nif (scheduleRange[0] > scheduleRange[1] || scheduleRange.length !== 2){\n  node.error(`The schedule range is not correct, it must be an array of two digits with the first digit inferior to the second`);\n  node.status({ fill: \"red\", shape: \"dot\", text: `The schedule range is not correct` });\n  return null;\n\n}\n\n\n//////  room list checks //////\nlet roomInstanceArray = [];\nfor (let r in rooms) {\n    const room = rooms[r];\n\n    // Add non mandatory information\n    if (!room.hasOwnProperty(\"preview\")){\n        room[\"preview\"] = preview;\n    }else if(!room.preview){\n        room.preview = preview;\n    }\n\n    if (!room.hasOwnProperty(\"pastview\")){\n        room[\"pastview\"] = pastview;\n    } else if (!room.pastview) {\n        room.pastview = pastview;\n    }\n\n    if (!room.hasOwnProperty(\"timezone\")){\n        room[\"timezone\"] = timeZone;\n    } else if (!room.timeZone) {\n        room.timeZone = timeZone;\n    }\n\n    if (!room.hasOwnProperty(\"tempUnOccupied\")) {\n        room[\"tempUnOccupied\"] = defaultTempUnOccupied;\n    } else if (!room.tempUnOccupied) {\n        room.tempUnOccupied = defaultTempUnOccupied;\n    }\n\n    if (!room.hasOwnProperty(\"tempOccupied\")) {\n        room[\"tempOccupied\"] = defaultTempOccupied;\n    } else if (!room.tempOccupied) {\n        room.tempOccupied = defaultTempOccupied;\n    }\n\n    if (!room.hasOwnProperty(\"sorted\")){\n        room[\"sorted\"] = sorted;\n    } else if (!room.sorted) {\n        room.sorted = sorted;\n    }\n\n    if (!room.hasOwnProperty(\"scheduleName\")){\n        node.warn(`The room has no name. Details: ${room}\\nThe room is now called NoNameRoom`);\n        room[\"scheduleName\"] = \"NoNameRoom\";\n    } else if (!room.scheduleName) {\n        room.scheduleName = \"NoNameRoom\";\n    }\n\n    if (!room.hasOwnProperty(\"url\") || !room.hasOwnProperty(\"scheduleID\")) {\n        node.error(`The room ${room.name} has no url or scheduleID`);\n        node.status({fill:\"red\",shape:\"dot\",text:`The room ${room.scheduleName} has no url or ScheduleID`});\n        return null;\n    } else if (!room.url || room.scheduleID === undefined) {\n        node.error(`The room ${room.name} has no url or scheduleID`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `The room ${room.scheduleName} has no url or ScheduleID` });\n        return null;\n    } else if (room.scheduleID > scheduleRange[1] || room.scheduleID < scheduleRange[0]){\n      node.error(`The room ${room.name} has an incorrect scheduleID, it must be set between ${scheduleRange[0]} and ${scheduleRange[1]}`);\n      node.status({ fill: \"red\", shape: \"dot\", text: `The room ${room.scheduleName} has an incorrect scheduleID`});\n        return null;\n    }\n    for (let device in room.devices) {\n        \n        let error = true;\n        Object.keys(deviceList).forEach(deviceType =>{\n            if (deviceType == device){\n                error = false ;\n            }\n        });\n        if (error){\n            flow.set('f_rooms', null);\n            node.error(`The room ${room.scheduleName} has a device type that don't belongs to the device list`);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The room ${room.scheduleName} has a device type that don't belongs to the device list` });\n            return null;\n        }\n\n        if (room.devices[device].some(element => element > deviceList[device].identity.maxDevNum)) {\n            node.error(`The room ${room.scheduleName} has a device number that exceed the maximum (${deviceList[device].identity.maxDevNum}) for device ${device} `);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The room ${room.scheduleName} has a device number that exceed the maximum (${deviceList[device].identity.maxDevNum})` });\n            return null;\n        }\n        \n    } \n\n    roomInstanceArray.push(room.scheduleID);\n\n    if  (roomInstanceArray.some((item, index) => roomInstanceArray.indexOf(item) !== index)){\n    node.error(`The room ${room.scheduleName} has the same scheduleID as an other room`);\n    node.status({ fill: \"red\", shape: \"dot\", text: `The room ${room.scheduleName} has the same scheduleID as an other room` });\n    return null;\n}\n}\n\n//////  device list checks //////\nlet deviceNameArray = [];\nfor (let devices in deviceList) {\n    const device = deviceList[devices];\n    if (device.hasOwnProperty(\"identity\") && device.hasOwnProperty(\"bacnet\")){\n        if(!device.identity.maxDevNum){\n            node.error(`The device ${devices} has no maxDevNum or it is equal to 0`);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has no maxDevNum or it is equal to 0` });\n            return null;\n        }\n        if(!device.bacnet.hasOwnProperty(\"offsetAV\")){\n            node.error(`The device ${devices} has no offsetAV`);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has no offsetAV` });\n            return null;\n        }\n        if(!device.bacnet.instanceRangeAV){\n            node.error(`The device ${devices} has no instanceRangeAV or it is equal to 0`);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has no instanceRangeAV or it is equal to 0` });\n            return null;\n        }\n        if(device.bacnet.hasOwnProperty(\"objects\") && device.bacnet.objects?.hasOwnProperty(\"controllerSetpoint\")){\n            if(!device.bacnet.objects.controllerSetpoint.instanceNum){\n            node.error(`The device ${devices} has no instanceNum or it is equal to 0`);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has no instanceNum or it is equal to 0` });\n            return null;\n            }  \n        }else{\n            node.error(`The device ${devices} has no objects or controllerSetpoint property`);\n            node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has no objects or controllerSetpoint property` });\n            return null;\n        }\n    \n    }else{\n        node.error(`The device ${devices} has no identity or bacnet property`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has no identity or bacnet property` });\n        return null;\n    }\n    deviceNameArray.push(devices);\n\n    if  (deviceNameArray.some((item, index) => deviceNameArray.indexOf(item) !== index)){\n    node.error(`The device ${devices} has the same name as an other device`);\n    node.status({ fill: \"red\", shape: \"dot\", text: `The device ${devices} has the same name as an other device` });\n    return null;\n}\n\n}\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Configuration OK` });\n\n//Autentification key\nlet bufferkey = Buffer.from(controllerLogin + \":\" + controllerPassword);\nconst keybase64 = bufferkey.toString('base64');\nconst autentikey = \"Basic \" + keybase64;\n\n// Store variables\nflow.set('f_controllerIP', controllerIP);\nflow.set('f_akey', autentikey);\n\nflow.set('f_deviceList', deviceList);\n\nflow.set('f_schedulesAVOffset',schedulesAVOffset);\nflow.set(\"f_createScheduleAV\", createScheduleAV);\nflow.set(\"f_scheduleRange\", scheduleRange);\n\n\nflow.set('f_timeZone', timeZone);\nflow.set('f_dailySchedule', dailySchedule);\nflow.set('f_timeOffsetBeforeStart', timeOffsetBeforeStart);\nflow.set('f_timeOffsetBeforeEnd', timeOffsetBeforeEnd);\nflow.set('f_contentRmEvent', contentRmEvent);\nflow.set('f_preview', preview);\nflow.set('f_pastview', pastview);\nflow.set('f_sorted', sorted);\n\nflow.set('f_rooms', rooms);\n\nreturn msg ;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 100,
        "wires": [
            [
                "6642241df905751a"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "b416e36624220443",
        "type": "inject",
        "z": "ff477416b0a79e72",
        "g": "4f55c46d238ce1fe",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 95,
        "y": 100,
        "wires": [
            [
                "afdcb9ab47522dc1"
            ]
        ],
        "l": false
    },
    {
        "id": "01c9bba14c3a5697",
        "type": "function",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "Rooms",
        "func": "let rooms = flow.get(\"f_rooms\");\n\nflow.set('f_startTime', Date.now());\nflow.set('f_nbRooms', rooms.length);\nflow.set('f_roomCounter', 0);\n\n// Send each room information as an individual msg\nfor (let j=0; j<rooms.length; j++) {\n\n    msg.roomInfo = rooms[j];\n    if (rooms[j].isActive){\n        node.send(msg);\n    }\n    }\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 279,
        "wires": [
            [
                "34d790016980d585"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "283e975103416336",
        "type": "inject",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "Inject rooms",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 105,
        "y": 279,
        "wires": [
            [
                "01c9bba14c3a5697"
            ]
        ],
        "icon": "node-red/timer.svg",
        "l": false
    },
    {
        "id": "34d790016980d585",
        "type": "queue",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "",
        "input": "roomInfo",
        "inputType": "msg",
        "addFields": "\"\"",
        "addFieldsType": "json",
        "pourType": "initial",
        "pourTypeType": "pourType",
        "pourTime": "",
        "pourTimeType": "num",
        "pourAmount": "1",
        "pourAmountType": "num",
        "maxUseMemory": "",
        "x": 390,
        "y": 279,
        "wires": [
            [
                "e922a30640ddcfaf"
            ]
        ]
    },
    {
        "id": "6174c751354a85d1",
        "type": "function",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "exit status",
        "func": "let roomInfo = msg.roomInfo;\nlet msgCorrect = false;\n\nswitch (msg.statusCode) {\n    case 200:\n        node.warn(`Successfully transmitted to the server. Process time = ${Date.now() - roomInfo.transmitTime} ms`);\n        msgCorrect = true;\n        break;\n    case 400:\n        node.error(\"Error 400: Bad HTTP Request\");\n        if (msg.payload.includes(\"write-access-denied\")) {\n            node.error(\"Error: Trying to write a Read Only object (analogInput)\");\n        }\n        break;\n    case 401:\n        node.error(\"Error 401: Can't connect to controller: Authorization error\");\n        break;\n    case 500:\n        node.error(\"Error 500: Server Error 500\");\n        break;\n    case 404:\n        node.error(\"Error 404\");\n        break;\n    case \"ETIMEDOUT\":\n        node.error(\"Error: Can't connect to controller: TimeOut\");\n        break;\n    case 501:\n        node.error(\"Error 501. Not recognized request methode. Server not capable of supporting it for any resource\")\n        break;\n    case \"ENOTFOUND\":\n        node.error(\"RequestError: no url found. Please correct the url\")\n}\n\n// Debug information\nlet nbRooms = flow.get('f_nbRooms');\nflow.set('f_roomCounter', flow.get('f_roomCounter') + 1);\nlet roomCounter = flow.get('f_roomCounter');\n\nif (roomCounter == nbRooms && msgCorrect) {\n    node.warn(`All rooms processed in ${(Date.now() - flow.get('f_startTime')) / 1000} s`);\n}\nelse if (!msgCorrect) {\n    node.error(\"Schedule configuration not properly processed\");\n}\n\nmsg.dequeue = true;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1194,
        "y": 284,
        "wires": [
            []
        ]
    },
    {
        "id": "01fa8b2dda699a9f",
        "type": "complete",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "Operation complete",
        "scope": [
            "6174c751354a85d1"
        ],
        "uncaught": false,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "18b36d20e025263e"
            ]
        ]
    },
    {
        "id": "18b36d20e025263e",
        "type": "change",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "dequeue",
        "rules": [
            {
                "t": "set",
                "p": "dequeue",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "34d790016980d585"
            ]
        ]
    },
    {
        "id": "6026bbd195e5b5ae",
        "type": "subflow:fde0a8cadc4afeb6",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "",
        "x": 1017,
        "y": 249,
        "wires": [
            [
                "6174c751354a85d1",
                "63bf59c6b5d483e5"
            ]
        ]
    },
    {
        "id": "0a998ed924b9543e",
        "type": "switch",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "BACnet Schedule Exist ?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "404",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 279,
        "wires": [
            [
                "6026bbd195e5b5ae"
            ],
            [
                "6174c751354a85d1"
            ]
        ]
    },
    {
        "id": "e922a30640ddcfaf",
        "type": "subflow:8f30be050e0d0566",
        "z": "ff477416b0a79e72",
        "g": "ff6d80bcde020c52",
        "name": "",
        "x": 560,
        "y": 279,
        "wires": [
            [
                "0a998ed924b9543e",
                "57d168970caef7eb"
            ]
        ]
    },
    {
        "id": "6642241df905751a",
        "type": "subflow:a30c605e1c5f198e",
        "z": "ff477416b0a79e72",
        "g": "4f55c46d238ce1fe",
        "name": "",
        "x": 470,
        "y": 100,
        "wires": []
    }
]